# This file handles daily workflow handlers
# it defines ask_potential, save_potential, dispatch_potential_prompts, send_admin_digest functions

import os
from datetime import date
from telegram import ForceReply, Update
from telegram.ext import ContextTypes
from services.crud import create_report, get_users_by_geo, get_user_geos, DuplicateReportError
from services.reports import get_today_summary, format_summary_markdown
from utils.logger import logger, telegram_retry

# Context: this function is used within the application to send potential profit prompts
# to managers with ForceReply for easy input
async def ask_potential(update, context):
    """Send potential profit prompt to manager with ForceReply"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    message = (
        f"üëã {user_name}, –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è!\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n"
        f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —É –≥—Ä–∏–≤–Ω—è—Ö**"
    )
    
    await update.message.reply_text(
        message,
        reply_markup=ForceReply(selective=True),
        parse_mode='Markdown'
    )
    logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–ª–∞–Ω–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s", user_id)

# Context: this function is used within the application to save potential profit data
# from ForceReply messages and handle duplicate entries
async def save_potential(update, context):
    """Save potential profit from ForceReply message"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = update.message.text.strip()
    
    # Parse amount with improved validation
    from utils.logger import parse_amount
    amount, error_message = parse_amount(text)
    
    if error_message:
        await update.message.reply_text(f"‚ùå {error_message}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—é —Å—É–º–æ—é.")
        return
    
    try:
        # Get user's geos
        user_geos = await get_user_geos(user_id)
        if not user_geos:
            await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –æ—Ñ—ñ—Å—É –∞–±–æ —Ä–µ–≥—ñ–æ–Ω—É!")
            return
        
        # For daily reports, save to the first geo (or implement geo selection)
        geo = user_geos[0][0]
        office = user_geos[0][1]
        
        # Save report
        await create_report(
            office_id=office.id,
            geo_id=geo.id,
            report_date=date.today(),
            amount=amount
        )
        
        if len(user_geos) > 1:
            geo_list = ", ".join([g.name for g, o in user_geos])
            await update.message.reply_text(
                f"‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\n"
                f"–û—Ñ—ñ—Å: {office.name}\n"
                f"–†–µ–≥—ñ–æ–Ω–∏: {geo_list}\n"
                f"–°—É–º–∞: {amount:,} ‚Ç¥\n\n"
                f"‚ÑπÔ∏è *–°—É–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É {geo.name}*",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\n"
                f"–û—Ñ—ñ—Å: {office.name}\n"
                f"–†–µ–≥—ñ–æ–Ω: {geo.name}\n"
                f"–°—É–º–∞: {amount:,} ‚Ç¥",
                parse_mode='Markdown'
            )
        
    except DuplicateReportError:
        await update.message.reply_text("‚ö†Ô∏è –°—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –≤–≤–µ–¥–µ–Ω–æ! –î—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–µ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è.")
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞=%s: %s", user_id, str(e))
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# Context: this function is used within the application to dispatch daily prompts
# to all active managers for their respective GEOs
@telegram_retry(max_retries=3, base_delay=2.0)
async def dispatch_potential_prompts(context: ContextTypes.DEFAULT_TYPE):
    """Dispatch potential profit prompts to all managers"""
    try:
        users_data = await get_users_by_geo()
        
        if not users_data:
            logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É")
            return
        
        sent_count = 0
        for user, office in users_data:
            try:
                # Get user's geos for the message
                user_geos = await get_user_geos(user.tg_id)
                if not user_geos:
                    logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –Ω–µ –º–∞—î –ø—Ä–∏–≤'—è–∑–∞–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤", user.tg_id)
                    continue
                
                geo_list = ", ".join([geo.name for geo, office in user_geos])
                
                message = (
                    f"üìÖ **–©–æ–¥–µ–Ω–Ω–∏–π –∑–∞–ø–∏—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É**\n\n"
                    f"–û—Ñ—ñ—Å: {office.name}\n"
                    f"–†–µ–≥—ñ–æ–Ω–∏: {geo_list}\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n"
                    f"‚ÑπÔ∏è *–Ø–∫—â–æ —É –≤–∞—Å –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É*"
                )
                
                await context.bot.send_message(
                    chat_id=user.tg_id,
                    text=message,
                    reply_markup=ForceReply(selective=True),
                    parse_mode='Markdown'
                )
                sent_count += 1
                logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s –æ—Ñ—ñ—Å=%s —Ä–µ–≥—ñ–æ–Ω–∏=%s", user.tg_id, office.name, geo_list)
                
            except Exception as e:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s: %s", user.tg_id, str(e))
        
        logger.info("–©–æ–¥–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: %d/%d", sent_count, len(users_data))
        
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —É dispatch_potential_prompts: %s", str(e))

# Context: this function is used within the application to send daily digest
# to admin with summary of all planned amounts
@telegram_retry(max_retries=3, base_delay=2.0)
async def send_admin_digest(context: ContextTypes.DEFAULT_TYPE):
    """Send daily digest to admin"""
    try:
        admin_id = os.getenv("ADMIN_TG_ID")
        if not admin_id:
            logger.error("ADMIN_TG_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
        
        admin_id = int(admin_id)
        
        # Get today's summary
        summary_data = await get_today_summary()
        
        # Format as markdown
        digest_text = format_summary_markdown(summary_data)
        
        # Send to admin
        await context.bot.send_message(
            chat_id=admin_id,
            text=digest_text,
            parse_mode='Markdown'
        )
        
        logger.info("–©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É=%s –∑ %d –∑–∞–ø–∏—Å–∞–º–∏", admin_id, len(summary_data))
        
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç—É –∞–¥–º—ñ–Ω—É: %s", str(e))