# This file handles start and basic command handlers
# it defines start_command and cancel_command functions

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from utils.logger import logger

# Context: this function is used within the application to handle /start command
# and welcome users to the bot
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {user_name}!\n\n"
        f"ü§ñ –¶–µ –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –ø—Ä–∏–±—É—Ç–∫—ñ–≤.\n\n"
        f"üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç–∏:\n"
        f"‚Ä¢ üìÖ –©–æ–¥–µ–Ω–Ω–æ –æ 18:50 - –∑–∞–ø–∏—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n"
        f"‚Ä¢ üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –æ 19:00 - –∑–∞–ø–∏—Ç —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n"
        f"‚Ä¢ üìä 1-–≥–æ —á–∏—Å–ª–∞ –æ 09:00 - –∑–≤—ñ—Ç –∞–¥–º—ñ–Ω—É\n\n"
        f"‚ùì –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∏ –±–æ—Ç—É!\n\n"
        f"üìã –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help"
    )
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –≤–∏–∫–ª–∏–∫–∞–≤ /start", user_id)

# Context: this handler is used within the application to show help message
# with all available commands and their descriptions
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help message with all available commands"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    help_message = (
        f"üìã *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
        f"üè† *–û—Å–Ω–æ–≤–Ω—ñ:*\n"
        f"‚Ä¢ /start - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –æ–ø–∏—Å –±–æ—Ç–∞\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        f"‚Ä¢ /cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é\n\n"
        f"üí∞ *–û–±–ª—ñ–∫ –ø—Ä–∏–±—É—Ç–∫—ñ–≤:*\n"
        f"‚Ä¢ /ask\\_potential - –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤–≤–æ–¥ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n"
        f"‚Ä¢ /ask\\_fact - –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤–≤–æ–¥ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n\n"
        f"üìä *–ó–≤—ñ—Ç–∏:*\n"
        f"‚Ä¢ /monthly\\_report - –ü–æ–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç\n\n"
        f"ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:*\n"
        f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–æ –æ 18:50 - –∑–∞–ø–∏—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –æ 19:00 - –∑–∞–ø–∏—Ç —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n"
        f"‚Ä¢ 1-–≥–æ —á–∏—Å–ª–∞ –æ 09:00 - –∑–≤—ñ—Ç –∞–¥–º—ñ–Ω—É\n\n"
        f"‚ùì *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:*\n"
        f"–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∏ –±–æ—Ç—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—â–µ\\."
    )
    
    await update.message.reply_text(help_message, parse_mode='Markdown')
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –≤–∏–∫–ª–∏–∫–∞–≤ /help", user_id)

# Context: this handler is used within the application to cancel current ForceReply state
# and provide user-friendly feedback about cancellation
async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel current operation and clear ForceReply state"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    # Check if user has any active state that can be cancelled
    user_data = context.user_data
    if user_data is None:
        user_data = {}
        
    has_active_state = bool(user_data.get('force_reply_active') or 
                           user_data.get('waiting_for_fact') or
                           user_data.get('waiting_for_potential'))
    
    if has_active_state:
        # Clear all possible states
        user_data.clear()
        
        # Send confirmation with context about what was cancelled
        await update.message.reply_text(
            "‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥.",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.info("User %s cancelled active operation", user_id)
    else:
        # No active state to cancel
        await update.message.reply_text(
            "‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
        logger.info("User %s tried to cancel but no active operation", user_id)
    
    return ConversationHandler.END