# This file handles monthly workflow handlers
# it defines ask_fact, save_fact, ask_fact_all, monthly_report functions

import os
from telegram import ForceReply, Update
from telegram.ext import ContextTypes
from services.crud import create_fact, get_users_by_geo, get_user_geos, DuplicateFactError
from services.reports import get_monthly_delta, format_monthly_report_markdown
from utils.schedule import current_month_date, previous_month_date, current_month_string, previous_month_string
from utils.logger import logger, telegram_retry

# Context: this function is used within the application to send fact profit prompts
# to managers with ForceReply for easy input
async def ask_fact(update, context):
    """Send fact profit prompt to manager with ForceReply"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–∫—Ç –∑–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è –º–µ—Å—è—Ü (—Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞)
    target_month_str = current_month_string()
    
    # Get user's geos to show in prompt
    user_geos = await get_user_geos(user_id)
    if not user_geos:
        await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –æ—Ñ—ñ—Å—É –∞–±–æ —Ä–µ–≥—ñ–æ–Ω—É!")
        return
    
    geo_list = ", ".join([geo.name for geo, office in user_geos])
    office_name = user_geos[0][1].name if user_geos else "–ù–µ–≤—ñ–¥–æ–º–∏–π –æ—Ñ—ñ—Å"
    
    message = (
        f"üëã {user_name}, –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è!\n\n"
        f"üìÖ **–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {target_month_str}**\n\n"
        f"–û—Ñ—ñ—Å: {office_name}\n"
        f"–†–µ–≥—ñ–æ–Ω–∏: {geo_list}\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å:\n"
        f"üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —É –≥—Ä–∏–≤–Ω—è—Ö**\n\n"
        f"‚ÑπÔ∏è *–Ø–∫—â–æ —É –≤–∞—Å –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É*"
    )
    
    await update.message.reply_text(
        message,
        reply_markup=ForceReply(selective=True),
        parse_mode='Markdown'
    )
    logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s –∑–∞ –º—ñ—Å—è—Ü—å=%s", user_id, target_month_str)

# Context: this function is used within the application to save fact profit data
# from ForceReply messages and handle duplicate entries
async def save_fact(update, context):
    """Save fact profit from ForceReply message"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = update.message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –∑–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è –º–µ—Å—è—Ü
    target_month_date = current_month_date()
    target_month_str = current_month_string()
    
    # Parse amount with improved validation
    from utils.logger import parse_amount
    amount, error_message = parse_amount(text)
    
    if error_message:
        await update.message.reply_text(f"‚ùå {error_message}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—é —Å—É–º–æ—é.")
        return
    
    try:
        # Get user's geos
        user_geos = await get_user_geos(user_id)
        if not user_geos:
            await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –æ—Ñ—ñ—Å—É –∞–±–æ —Ä–µ–≥—ñ–æ–Ω—É!")
            return
        
        office_name = user_geos[0][1].name
        
        # If user has multiple geos, we need to handle this case
        if len(user_geos) > 1:
            # For now, we'll save the total amount to the first geo
            # TODO: In future, implement geo-specific input
            geo = user_geos[0][0]
            geo_list = ", ".join([g.name for g, o in user_geos])
            
            await create_fact(
                geo_id=geo.id,
                month=target_month_date,
                amount=amount
            )
            
            await update.message.reply_text(
                f"‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫!**\n\n"
                f"–û—Ñ—ñ—Å: {office_name}\n"
                f"–†–µ–≥—ñ–æ–Ω–∏: {geo_list}\n"
                f"–ú—ñ—Å—è—Ü—å: {target_month_str}\n"
                f"–°—É–º–∞: {amount:,} ‚Ç¥\n\n"
                f"‚ÑπÔ∏è *–°—É–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É {geo.name}*",
                parse_mode='Markdown'
            )
        else:
            # Single geo case
            geo = user_geos[0][0]
            
            await create_fact(
                geo_id=geo.id,
                month=target_month_date,
                amount=amount
            )
            
            await update.message.reply_text(
                f"‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫!**\n\n"
                f"–û—Ñ—ñ—Å: {office_name}\n"
                f"–†–µ–≥—ñ–æ–Ω: {geo.name}\n"
                f"–ú—ñ—Å—è—Ü—å: {target_month_str}\n"
                f"–°—É–º–∞: {amount:,} ‚Ç¥",
                parse_mode='Markdown'
            )
        
    except DuplicateFactError:
        await update.message.reply_text(f"‚ö†Ô∏è –§–∞–∫—Ç –∑–∞ {target_month_str} –≤–∂–µ –≤–≤–µ–¥–µ–Ω–æ! –î—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–µ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è.")
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞=%s: %s", user_id, str(e))
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# Context: this function is used within the application to dispatch monthly fact prompts
# to all active managers for their respective GEOs
@telegram_retry(max_retries=3, base_delay=2.0)
async def ask_fact_all(context: ContextTypes.DEFAULT_TYPE):
    """Dispatch fact profit prompts to all managers"""
    try:
        users_data = await get_users_by_geo()
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–∫—Ç –∑–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π—Å—è –º–µ—Å—è—Ü
        target_month_str = current_month_string()
        
        if not users_data:
            logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É")
            return
        
        sent_count = 0
        for user, office in users_data:
            try:
                # Get user's geos for the message
                user_geos = await get_user_geos(user.tg_id)
                if not user_geos:
                    logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –Ω–µ –º–∞—î –ø—Ä–∏–≤'—è–∑–∞–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤", user.tg_id)
                    continue
                
                geo_list = ", ".join([geo.name for geo, office in user_geos])
                
                message = (
                    f"üìÖ **–ú—ñ—Å—è—á–Ω–∏–π –∑–∞–ø–∏—Ç —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É**\n\n"
                    f"–û—Ñ—ñ—Å: {office.name}\n"
                    f"–†–µ–≥—ñ–æ–Ω–∏: {geo_list}\n"
                    f"–ú—ñ—Å—è—Ü—å: {target_month_str}\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –º—ñ—Å—è—Ü—å:\n\n"
                    f"‚ÑπÔ∏è *–Ø–∫—â–æ —É –≤–∞—Å –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É*"
                )
                
                await context.bot.send_message(
                    chat_id=user.tg_id,
                    text=message,
                    reply_markup=ForceReply(selective=True),
                    parse_mode='Markdown'
                )
                sent_count += 1
                logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º—ñ—Å—è—á–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s –æ—Ñ—ñ—Å=%s —Ä–µ–≥—ñ–æ–Ω–∏=%s", user.tg_id, office.name, geo_list)
                
            except Exception as e:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É=%s: %s", user.tg_id, str(e))
        
        logger.info("–ú—ñ—Å—è—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: %d/%d", sent_count, len(users_data))
        
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —É ask_fact_all: %s", str(e))

# Context: this function is used within the application to send monthly report
# to admin with plan vs fact comparison
@telegram_retry(max_retries=3, base_delay=2.0)
async def monthly_report(context: ContextTypes.DEFAULT_TYPE):
    """Send monthly report to admin"""
    try:
        admin_id = os.getenv("ADMIN_TG_ID")
        if not admin_id:
            logger.error("ADMIN_TG_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
        
        admin_id = int(admin_id)
        
        # Get previous month's summary (reports sent on 1st day for previous month)
        prev_month_str = previous_month_string()
        delta_data = await get_monthly_delta(prev_month_str)
        
        # Format as markdown
        report_text = format_monthly_report_markdown(delta_data, prev_month_str)
        
        # Send to admin
        await context.bot.send_message(
            chat_id=admin_id,
            text=report_text,
            parse_mode='Markdown'
        )
        
        logger.info("–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É=%s –∑–∞ –º—ñ—Å—è—Ü—å=%s", admin_id, prev_month_str)
        
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—É: %s", str(e))