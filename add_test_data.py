# This file handles test data creation
# it defines add_test_data function to populate database with sample data

import asyncio
import os
from dotenv import load_dotenv
from db.session import AsyncSessionLocal
from db.models import Office, Geo, User

# Context: this function is used within the test setup to create sample data
# for testing the daily workflow functionality
async def add_test_data():
    """Add test data to database for manual testing"""
    load_dotenv()
    
    admin_tg_id = os.getenv("ADMIN_TG_ID")
    if not admin_tg_id:
        print("‚ùå ADMIN_TG_ID not found in .env file!")
        return
    
    admin_tg_id = int(admin_tg_id)
    
    async with AsyncSessionLocal() as session:
        # Create test office
        office = Office(name="–¢–µ—Å—Ç–æ–≤–∏–π –û—Ñ—ñ—Å")
        session.add(office)
        await session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –æ—Ñ—ñ—Å: {office.name} (ID: {office.id})")
        
        # Create test geo
        geo = Geo(name="–ö–∏—ó–≤", office_id=office.id)
        session.add(geo)
        await session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–≥—ñ–æ–Ω: {geo.name} (ID: {geo.id})")
        
        # Create test user (admin)
        user = User(
            tg_id=admin_tg_id,
            name="–¢–µ—Å—Ç–æ–≤–∏–π –ú–µ–Ω–µ–¥–∂–µ—Ä",
            office_id=office.id
        )
        session.add(user)
        await session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.name} (TG ID: {user.tg_id})")
        
        print("\nüéâ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        print(f"–û—Ñ—ñ—Å: {office.name} (ID: {office.id})")
        print(f"–†–µ–≥—ñ–æ–Ω: {geo.name} (ID: {geo.id})")
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.name} (TG ID: {user.tg_id})")
        print("\n–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞!")

if __name__ == "__main__":
    asyncio.run(add_test_data()) 